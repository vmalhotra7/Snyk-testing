name: Game 2048 Snyk CI/CD Example

on:
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      snyk_fail_threshold:
        description: |
          Sets fail threshold for Snyk 
          (low | medium | high | critical)
        required: true
        default: "medium"

env:
  ENVIRONMENT: "dev"
  PROJECT_DIR: "game-2048-example"
  PROJECT_NAME: "game-2048"
  SNYK_FAIL_THRESHOLD: "medium"

jobs:
  build-and-test-application:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: npm install, build, and test
        run: |
          npm install
          npm run build --if-present
          npm test
        working-directory: ${{ env.PROJECT_DIR }}

  snyk-container-security-check:
    runs-on: ubuntu-latest
    needs: build-and-test-application

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build App Image for Snyk container scanning
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.PROJECT_DIR }}
          push: false
          tags: "${{ secrets.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.sha }}"

      - name: Install Snyk
        uses: snyk/actions/setup@master

      - name: Check application container vulnerabilities
        run: |
          snyk container test "${{ secrets.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.sha }}" \
            --file=${{ env.PROJECT_DIR }}/Dockerfile \
            --severity-threshold=${{ github.event.inputs.snyk_fail_threshold || env.SNYK_FAIL_THRESHOLD }} \
            --target-name=${{ env.PROJECT_NAME }} \
            --target-reference=${{ env.ENVIRONMENT }} \
            --sarif-file-output=snyk-container-scan.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk report SARIF file
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-container-scan.sarif
          category: snyk-container-scan
          
      - name: Notify using Slack about Snyk Scan Issues
        if: ${{ always() }}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [
              {
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text:`
                  ${process.env.AS_WORKFLOW}\n
                  *Environment*: ${process.env.ENVIRONMENT}\n
                  *Job:* ${process.env.AS_JOB}\n
                  *Commit:* (${process.env.AS_COMMIT})\n
                  *Repo:* ${process.env.AS_REPO}\n
                  *Ref:* ${process.env.AS_REF}\n
                  *Author:* ${process.env.AS_AUTHOR}\n
                  *Status:* ${{ job.status }} in ${process.env.AS_TOOK}\n
                  *Snyk scan results:* https://app.snyk.io
                `,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-and-push-app-image:
    runs-on: ubuntu-latest
    needs: snyk-container-security-check

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push App Image to DigitalOcean Container Registry
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.PROJECT_DIR }}
          push: true
          tags: "${{ secrets.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.sha }}"

  snyk-iac-security-check:
    runs-on: ubuntu-latest
    needs: build-and-push-app-image

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Snyk
        uses: snyk/actions/setup@master

      - name: Check for Kubernetes manifests vulnerabilities
        run: |
          snyk iac test \
            --severity-threshold=${{ github.event.inputs.snyk_fail_threshold || env.SNYK_FAIL_THRESHOLD }} \
            --target-name=${{ env.PROJECT_NAME }} \
            --target-reference=${{ env.ENVIRONMENT }} \
            --sarif-file-output=snyk-iac-scan.sarif \
            --report
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: ${{ env.PROJECT_DIR }}
    
      - name: Upload Snyk IAC SARIF file
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ env.PROJECT_DIR }}/snyk-iac-scan.sarif
          category: snyk-iac-scan
          
      - name: Notify using Slack about Snyk Scan Issues
        if: ${{ always() }}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [
              {
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text:`
                  ${process.env.AS_WORKFLOW}\n
                  *Environment*: ${process.env.ENVIRONMENT}\n
                  *Job:* ${process.env.AS_JOB}\n
                  *Commit:* (${process.env.AS_COMMIT})\n
                  *Repo:* ${process.env.AS_REPO}\n
                  *Ref:* ${process.env.AS_REF}\n
                  *Author:* ${process.env.AS_AUTHOR}\n
                  *Status:* ${{ job.status }} in ${process.env.AS_TOOK}\n
                  *Snyk scan results:* https://app.snyk.io
                `,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs:
      - snyk-iac-security-check
      - build-and-push-app-image

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.DOKS_CLUSTER }} --expiry-seconds 600

      - name: Configure app deployment registry
        run: |
          IMAGE_TAG="${{ github.sha }}"
          DOCKER_IMAGE="${{ secrets.DOCKER_REGISTRY }}/${PROJECT_NAME}:${IMAGE_TAG}"
          sed -i "s#image:.*#image: ${DOCKER_IMAGE}#g" deployment.yaml
        working-directory: ${{ env.PROJECT_DIR }}/kustomize/resources/

      - name: Deploy app to Kubernetes
        run: kubectl apply --prune --all -k kustomize/
        working-directory: ${{ env.PROJECT_DIR }}
